par(mfrow = c(1, 1))
X_scatter_valid = valid[, c("OverallQual", "OverallQual")]
par(mfrow = c(1, 2))
plot(X_scatter_train$OverallQual, X_scatter_train$SalePrice, col = "blue", main = "training Data and predicted values from valid data", xlab = "OverallQual", ylab = "SalePrice")
plot(X_scatter_valid$OverallQual, predictions, col = "red")
par(mfrow = c(1, 1))
X_scatter_valid = valid[, c("OverallQual", "SalePrice")]
plot(X_scatter_train$OverallQual, X_scatter_train$SalePrice, col = "blue", main = "training Data and predicted values from valid data", xlab = "OverallQual", ylab = "SalePrice")
# plotting the train data values and adding the predicted values from valid data
X_scatter_valid = valid[, c("OverallQual", "SalePrice")]
plot(X_scatter_train$OverallQual, X_scatter_train$SalePrice, col = "blue", main = "training Data and predicted values from valid data", xlab = "OverallQual", ylab = "SalePrice")
# plotting the train data values and adding the predicted values from valid data
X_scatter_valid = valid[, c("OverallQual", "SalePrice")]
plot(X_scatter_train$OverallQual, X_scatter_train$SalePrice, col = "blue", main = "training Data and predicted values from valid data", xlab = "OverallQual", ylab = "SalePrice")
par(mar = c(5, 5, 4, 2) + 0.1)
X_scatter_valid = valid[, c("OverallQual", "SalePrice")]
plot(X_scatter_train$OverallQual, X_scatter_train$SalePrice, col = "blue", main = "training Data and predicted values from valid data", xlab = "OverallQual", ylab = "SalePrice")
# Plotting x and y scatter and model fitting line
X_scatter_train <- train[, c("OverallQual", "SalePrice")]
plot(X_scatter_train$OverallQual, X_scatter_train$SalePrice, xlab="OverallQual", ylab="Sale Price", main="Scatter Plot of Data")
abline(model, col = "red")
# plotting the train data values and adding the predicted values from valid data
par(mar = c(5, 5, 4, 2) + 0.1)
dev.new(width = 10, height = 6)
X_scatter_valid = valid[, c("OverallQual", "SalePrice")]
plot(X_scatter_train$OverallQual, X_scatter_train$SalePrice, col = "blue", main = "training Data and predicted values from valid data", xlab = "OverallQual", ylab = "SalePrice")
points(X_scatter_valid$OverallQual, predictions, col = "red")
View(X_scatter_valid)
par(mar = c(5, 5, 4, 2) + 0.1)
dev.new(width = 10, height = 6)
X_scatter_valid = valid[, c("OverallQual", "SalePrice")]
View(X_scatter_valid)
plot(X_scatter_train$OverallQual, X_scatter_train$SalePrice, col = "blue", main = "training Data and predicted values from valid data", xlab = "OverallQual", ylab = "SalePrice")
points(X_scatter_valid$OverallQual, predictions, col = "red")
# plotting the actual and predicted values on validation set
X_scatter_valid = valid[, c("OverallQual", "SalePrice")]
plot(X_scatter_valid$OverallQual, X_scatter_valid$SalePrice, col = "blue", main = "Actual vs. Predicted Values", xlab = "OverallQual", ylab = "SalePrice")
points(X_scatter_valid$OverallQual, predictions, col = "red")
# reading the data
data <- read.csv("OnlyNumeric_Data.csv")
data <- subset(data, select = -c(Id))
# Checking if there are any nan values
missing_values <- colSums(is.na(data))
print(missing_values)
data <- data.frame(sapply(data, as.numeric))
data <- data[, c("GRLivArea" , "SalePrice")]
# reading the data
data <- read.csv("OnlyNumeric_Data.csv")
data <- subset(data, select = -c(Id))
# Checking if there are any nan values
missing_values <- colSums(is.na(data))
print(missing_values)
data <- data.frame(sapply(data, as.numeric))
data <- data[, c("GrLivArea" , "SalePrice")]
# view the last form of data
View(data
# view the last form of data
View(data)
View(data)
set.seed(123)
train_index <- createDataPartition(data$SalePrice, p = 0.8, list = FALSE)
train <- data[train_index, ]
valid <- data[-train_index, ]
# fit linear model on training set
model <- lm(SalePrice ~ ., data = train)
#print model summary
summary(model)
# make prediction on validation set
predictions <- predict(model,valid)
# make prediction on validation set
predictions <- predict(model,valid)
# Plotting x and y scatter and model fitting line
X_scatter_train <- train[, c("GrLivArea", "SalePrice")]
plot(X_scatter_train$GrLivArea, X_scatter_train$SalePrice, xlab="GrLivArea", ylab="Sale Price", main="Scatter Plot of Data")
abline(model, col = "red")
par(mar = c(5, 5, 4, 2) + 0.1)
dev.new(width = 10, height = 6)
X_scatter_valid = valid[, c("GrLivArea", "SalePrice")]
View(X_scatter_valid)
plot(X_scatter_train$GrLivArea, X_scatter_train$SalePrice, col = "blue", main = "training Data and predicted values from valid data", xlab = "GrLivArea", ylab = "SalePrice")
points(X_scatter_valid$GrLivArea, predictions, col = "red")
# plotting the train data values and adding the predicted values from valid data
par(mar = c(5, 5, 4, 2) + 0.1)
dev.new(width = 10, height = 6)
X_scatter_valid = valid[, c("GrLivArea", "SalePrice")]
View(X_scatter_valid)
plot(X_scatter_train$GrLivArea, X_scatter_train$SalePrice, col = "blue", main = "training Data and predicted values from valid data", xlab = "GrLivArea", ylab = "SalePrice")
points(X_scatter_train$GrLivArea, predictions, col = "red")
par(mar = c(5, 5, 4, 2) + 0.1)
dev.new(width = 10, height = 6)
X_scatter_valid = valid[, c("GrLivArea", "SalePrice")]
plot(X_scatter_train$GrLivArea, X_scatter_train$SalePrice, xlab = "Column1", ylab = "Column2", main = "Actual vs Predicted", col = "blue")
points(X_scatter_valid$GrLivArea, predictions, col = "red", pch = 16)
# make prediction on validation set
predictions <- predict(model,train)
X_scatter_train <- train[, c("GrLivArea", "SalePrice")]
plot(X_scatter_train$GrLivArea, X_scatter_train$SalePrice, xlab="GrLivArea", ylab="Sale Price", main="Scatter Plot of Data")
abline(model, col = "red")
par(mar = c(5, 5, 4, 2) + 0.1)
dev.new(width = 10, height = 6)
X_scatter_valid = valid[, c("GrLivArea", "SalePrice")]
plot(X_scatter_train$GrLivArea, X_scatter_train$SalePrice, xlab = "Column1", ylab = "Column2", main = "Actual vs Predicted", col = "blue")
points(X_scatter_train$GrLivArea, predictions, col = "red", pch = 16)
set.seed(123)
train_index <- createDataPartition(data$SalePrice, p = 0.8, list = FALSE)
train <- data[train_index, ]
valid <- data[-train_index, ]
# fit linear model on training set
model <- lm(SalePrice ~ ., data = train)
#print model summary
summary(model)
# make prediction on validation se
# plotting the actual and predicted values on validation set
X_scatter_valid = valid[, c("GrLivArea", "SalePrice")]
plot(X_scatter_valid$GrLivArea, X_scatter_valid$SalePrice, col = "blue", main = "Actual vs. Predicted Values", xlab = "GrLivArea", ylab = "SalePrice")
# plotting the actual and predicted values on validation set
dev.new(width = 10, height = 6)
X_scatter_valid = valid[, c("GrLivArea", "SalePrice")]
plot(X_scatter_valid$GrLivArea, X_scatter_valid$SalePrice, col = "blue", main = "Actual vs. Predicted Values", xlab = "GrLivArea", ylab = "SalePrice")
points(X_scatter_valid$GrLivArea, predictions, col = "red")
# split data into training set and validation set
set.seed(123)
train_index <- createDataPartition(data$SalePrice, p = 0.8, list = FALSE)
train <- data[train_index, ]
valid <- data[-train_index, ]
# fit linear model on training set
model <- lm(SalePrice ~ ., data = train)
#print model summary
summary(model)
# make prediction on validation set
predictions <- predict(model,valid)
dev.new(width = 10, height = 6)
X_scatter_valid = valid[, c("GrLivArea", "SalePrice")]
plot(X_scatter_valid$GrLivArea, X_scatter_valid$SalePrice, col = "blue", main = "Actual vs. Predicted Values", xlab = "GrLivArea", ylab = "SalePrice")
points(X_scatter_valid$GrLivArea, predictions, col = "red")
# reading the data
data <- read.csv("OnlyNumeric_Data.csv")
data <- subset(data, select = -c(Id))
# Checking if there are any nan values
missing_values <- colSums(is.na(data))
print(missing_values)
data <- data.frame(sapply(data, as.numeric))
data <- data[, c("GarageCars" , "SalePrice")]
# view the last form of data
View(data)
# split data into training set and validation set
set.seed(123)
train_index <- createDataPartition(data$SalePrice, p = 0.8, list = FALSE)
train <- data[train_index, ]
valid <- data[-train_index, ]
# fit linear model on training set
model <- lm(SalePrice ~ ., data = train)
#print model summary
summary(model)
# make prediction on validation set
predictions <- predict(model,valid)
# Plotting x and y scatter and model fitting line
X_scatter_train <- train[, c("GarageCars", "SalePrice")]
plot(X_scatter_train$GarageCars, X_scatter_train$SalePrice, xlab="GarageCars", ylab="Sale Price", main="Scatter Plot of Data")
# Plotting x and y scatter and model fitting line
dev.new(width = 10, height = 6)
X_scatter_train <- train[, c("GarageCars", "SalePrice")]
plot(X_scatter_train$GarageCars, X_scatter_train$SalePrice, xlab="GarageCars", ylab="Sale Price", main="Scatter Plot of Data")
abline(model, col = "red")
# plotting the actual and predicted values on validation set
dev.new(width = 10, height = 6)
X_scatter_valid = valid[, c("GarageCars", "SalePrice")]
plot(X_scatter_valid$GarageCars, X_scatter_valid$SalePrice, col = "blue", main = "Actual vs. Predicted Values", xlab = "GarageCars", ylab = "SalePrice")
points(X_scatter_valid$GarageCars, predictions, col = "red")
# reading the data
data <- read.csv("OnlyNumeric_Data.csv")
data <- subset(data, select = -c(Id))
# Checking if there are any nan values
missing_values <- colSums(is.na(data))
print(missing_values)
data <- data.frame(sapply(data, as.numeric))
data <- data[, c("GarageArea" , "SalePrice")]
# view the last form of data
View(data)
################################################################################
#-------------------------------------------------------------------------------
# Training , Validation and Plotting
# split data into training set and validation set
set.seed(123)
train_index <- createDataPartition(data$SalePrice, p = 0.8, list = FALSE)
train <- data[train_index, ]
valid <- data[-train_index, ]
# fit linear model on training set
model <- lm(SalePrice ~ ., data = train)
#print model summary
summary(model)
# make prediction on validation set
predictions <- predict(model,valid)
# Plotting x and y scatter and model fitting line
dev.new(width = 10, height = 6)
X_scatter_train <- train[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
abline(model, col = "red")
# plotting the actual and predicted values on validation set
dev.new(width = 10, height = 6)
X_scatter_valid = valid[, c("GarageArea", "SalePrice")]
plot(X_scatter_valid$GarageArea, X_scatter_valid$SalePrice, col = "blue", main = "Actual vs. Predicted Values", xlab = "GarageArea", ylab = "SalePrice")
points(X_scatter_valid$GarageArea, predictions, col = "red")
data <- read.csv("OnlyNumeric_Data.csv")
data <- subset(data, select = -c(Id))
column_names <- colnames(data)
print(column_names)
############ X and Y data##########
#X <- data[, -which(names(data) == "SalePrice")]
data<- data[, c("GarageArea","SalePrice")]
column_names <- colnames(data)
column_names
num_cols <- ncol(data)
print(num_cols)
#X <- X[, 1:10]
print(data)
######################################
X_corr <- data
corr <- cor(X_corr, method = "pearson", use = "pairwise.complete.obs")
corr_output <- as.matrix(corr[, "SalePrice"])
print(corr_output)
dim(corr_output)
# select columns to standardize
#cols_to_scale <- c("OverallQual","GrLivArea","GarageCars", "GarageArea", "TotalBsmtSF", "X1stFlrSF","FullBath", "TotRmsAbvGrd","GarageYrBlt","MasVnrArea","Fireplaces","BsmtFinSF1","LotFrontage","WoodDeckSF","OpenPorchSF","HalfBath", "LotArea")
#standardize selected columns
#scaled_data <- data
#scaled_data[, cols_to_scale] <- scale(data[, cols_to_scale])
#print(scaled_data)
###############################################################
############################################
train_index <- createDataPartition(data[["SalePrice"]], p = 0.7, list = FALSE)
print(nrow(data))
train <- data.frame(data[train_index, ))
############### Data##########################
data <- read.csv("OnlyNumeric_Data.csv")
data <- subset(data, select = -c(Id))
column_names <- colnames(data)
print(column_names)
############ X and Y data##########
#X <- data[, -which(names(data) == "SalePrice")]
data<- data[, c("GarageArea","SalePrice")]
column_names <- colnames(data)
column_names
num_cols <- ncol(data)
print(num_cols)
#X <- X[, 1:10]
print(data)
######################################
X_corr <- data
corr <- cor(X_corr, method = "pearson", use = "pairwise.complete.obs")
corr_output <- as.matrix(corr[, "SalePrice"])
print(corr_output)
dim(corr_output)
# select columns to standardize
#cols_to_scale <- c("OverallQual","GrLivArea","GarageCars", "GarageArea", "TotalBsmtSF", "X1stFlrSF","FullBath", "TotRmsAbvGrd","GarageYrBlt","MasVnrArea","Fireplaces","BsmtFinSF1","LotFrontage","WoodDeckSF","OpenPorchSF","HalfBath", "LotArea")
#standardize selected columns
#scaled_data <- data
#scaled_data[, cols_to_scale] <- scale(data[, cols_to_scale])
#print(scaled_data)
###############################################################
############################################
train_index <- createDataPartition(data$SalePrice, p = 0.8, list = FALSE)
train <- data[train_index, ]
valid <- data[-train_index, ]
################################################################
# fit random forest model
rf_model <- randomForest(train["GarageArea"],train[["SalePrice"]] , ntree =51)
install.packages('randomForest')
library(randomForest)
library(randomForest)
data <- read.csv("OnlyNumeric_Data.csv")
data <- subset(data, select = -c(Id))
column_names <- colnames(data)
print(column_names)
############ X and Y data##########
#X <- data[, -which(names(data) == "SalePrice")]
data<- data[, c("GarageArea","SalePrice")]
column_names <- colnames(data)
column_names
num_cols <- ncol(data)
print(num_cols)
#X <- X[, 1:10]
print(data)
######################################
X_corr <- data
corr <- cor(X_corr, method = "pearson", use = "pairwise.complete.obs")
corr_output <- as.matrix(corr[, "SalePrice"])
print(corr_output)
dim(corr_output)
# select columns to standardize
#cols_to_scale <- c("OverallQual","GrLivArea","GarageCars", "GarageArea", "TotalBsmtSF", "X1stFlrSF","FullBath", "TotRmsAbvGrd","GarageYrBlt","MasVnrArea","Fireplaces","BsmtFinSF1","LotFrontage","WoodDeckSF","OpenPorchSF","HalfBath", "LotArea")
#standardize selected columns
#scaled_data <- data
#scaled_data[, cols_to_scale] <- scale(data[, cols_to_scale])
#print(scaled_data)
###############################################################
############################################
train_index <- createDataPartition(data$SalePrice, p = 0.8, list = FALSE)
train <- data[train_index, ]
valid <- data[-train_index, ]
################################################################
# fit random forest model
rf_model <- randomForest(train["GarageArea"],train[["SalePrice"]] , ntree =51)
# print the model summary
print(rf_model)
pred_y <- predict(rf_model, test['GarageArea'])
############### Data##########################
data <- read.csv("OnlyNumeric_Data.csv")
data <- subset(data, select = -c(Id))
column_names <- colnames(data)
print(column_names)
############ X and Y data##########
#X <- data[, -which(names(data) == "SalePrice")]
data<- data[, c("GarageArea","SalePrice")]
column_names <- colnames(data)
column_names
num_cols <- ncol(data)
print(num_cols)
#X <- X[, 1:10]
print(data)
######################################
X_corr <- data
corr <- cor(X_corr, method = "pearson", use = "pairwise.complete.obs")
corr_output <- as.matrix(corr[, "SalePrice"])
print(corr_output)
dim(corr_output)
# select columns to standardize
#cols_to_scale <- c("OverallQual","GrLivArea","GarageCars", "GarageArea", "TotalBsmtSF", "X1stFlrSF","FullBath", "TotRmsAbvGrd","GarageYrBlt","MasVnrArea","Fireplaces","BsmtFinSF1","LotFrontage","WoodDeckSF","OpenPorchSF","HalfBath", "LotArea")
#standardize selected columns
#scaled_data <- data
#scaled_data[, cols_to_scale] <- scale(data[, cols_to_scale])
#print(scaled_data)
###############################################################
############################################
train_index <- createDataPartition(data$SalePrice, p = 0.8, list = FALSE)
train <- data[train_index, ]
valid <- data[-train_index, ]
################################################################
# fit random forest model
rf_model <- randomForest(train["GarageArea"],train[["SalePrice"]] , ntree =51)
# print the model summary
print(rf_model)
predictions <- predict(rf_model, valid['GarageArea'])
test_y<- valid[['SalePrice']]
mse <- mean((pred_y - test_y)^2)
data <- read.csv("OnlyNumeric_Data.csv")
data <- subset(data, select = -c(Id))
column_names <- colnames(data)
print(column_names)
############ X and Y data##########
#X <- data[, -which(names(data) == "SalePrice")]
data<- data[, c("GarageArea","SalePrice")]
column_names <- colnames(data)
column_names
num_cols <- ncol(data)
print(num_cols)
#X <- X[, 1:10]
print(data)
######################################
X_corr <- data
corr <- cor(X_corr, method = "pearson", use = "pairwise.complete.obs")
corr_output <- as.matrix(corr[, "SalePrice"])
print(corr_output)
dim(corr_output)
# select columns to standardize
#cols_to_scale <- c("OverallQual","GrLivArea","GarageCars", "GarageArea", "TotalBsmtSF", "X1stFlrSF","FullBath", "TotRmsAbvGrd","GarageYrBlt","MasVnrArea","Fireplaces","BsmtFinSF1","LotFrontage","WoodDeckSF","OpenPorchSF","HalfBath", "LotArea")
#standardize selected columns
#scaled_data <- data
#scaled_data[, cols_to_scale] <- scale(data[, cols_to_scale])
#print(scaled_data)
###############################################################
############################################
train_index <- createDataPartition(data$SalePrice, p = 0.8, list = FALSE)
train <- data[train_index, ]
valid <- data[-train_index, ]
################################################################
# fit random forest model
rf_model <- randomForest(train["GarageArea"],train[["SalePrice"]] , ntree =51)
# print the model summary
print(rf_model)
predictions <- predict(rf_model, valid['GarageArea'])
test_y<- valid[['SalePrice']]
mse <- mean((predictions - test_y)^2)
print(mse)
rmse <- sqrt(mse)
print(rmse)
# Plotting x and y scatter and model fitting line
dev.new(width = 10, height = 6)
X_scatter_train <- valid[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
abline(rf_model, col = "red")
dev.new(width = 10, height = 6)
X_scatter_train <- valid[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
lines(rf_model, col = "red")
pred <- predict(rf_model, train['GarageArea'])
# Plotting x and y scatter and model fitting line
dev.new(width = 10, height = 6)
X_scatter_train <- valid[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
lines(X_scatter_train$GarageArea, pred, col ="red",lwd=2)
print(rf_model)
predictions <- predict(rf_model, valid)
pred <- predict(rf_model, train)
test_y<- valid[['SalePrice']]
mse <- mean((predictions - test_y)^2)
print(mse)
rmse <- sqrt(mse)
print(rmse)
# Plotting x and y scatter and model fitting line
dev.new(width = 10, height = 6)
X_scatter_train <- valid[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
lines(X_scatter_train$GarageArea, pred, col ="red",lwd=2)
data <- read.csv("OnlyNumeric_Data.csv")
data <- subset(data, select = -c(Id))
column_names <- colnames(data)
print(column_names)
############ X and Y data##########
#X <- data[, -which(names(data) == "SalePrice")]
data<- data[, c("GarageArea","SalePrice")]
column_names <- colnames(data)
column_names
num_cols <- ncol(data)
print(num_cols)
#X <- X[, 1:10]
print(data)
######################################
X_corr <- data
corr <- cor(X_corr, method = "pearson", use = "pairwise.complete.obs")
corr_output <- as.matrix(corr[, "SalePrice"])
print(corr_output)
dim(corr_output)
# select columns to standardize
#cols_to_scale <- c("OverallQual","GrLivArea","GarageCars", "GarageArea", "TotalBsmtSF", "X1stFlrSF","FullBath", "TotRmsAbvGrd","GarageYrBlt","MasVnrArea","Fireplaces","BsmtFinSF1","LotFrontage","WoodDeckSF","OpenPorchSF","HalfBath", "LotArea")
#standardize selected columns
#scaled_data <- data
#scaled_data[, cols_to_scale] <- scale(data[, cols_to_scale])
#print(scaled_data)
###############################################################
############################################
train_index <- createDataPartition(data$SalePrice, p = 0.8, list = FALSE)
train <- data[train_index, ]
valid <- data[-train_index, ]
################################################################
# fit random forest model
rf_model <- randomForest(SalePrice ~ . , data = train , ntree =51)
# print the model summary
print(rf_model)
predictions <- predict(rf_model, valid)
pred <- predict(rf_model, train)
test_y<- valid[['SalePrice']]
mse <- mean((predictions - test_y)^2)
print(mse)
rmse <- sqrt(mse)
print(rmse)
# Plotting x and y scatter and model fitting line
dev.new(width = 10, height = 6)
X_scatter_train <- valid[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
lines(X_scatter_train$GarageArea, pred, col ="red",lwd=2)
View(pred)
View(pred)
View(X_scatter_train)
View(pred)
View(predictions)
pred <- predict(rf_model, train)
predictions <- predict(rf_model, valid)
View(pred)
View(predictions)
dev.new(width = 10, height = 6)
X_scatter_train <- train[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
lines(X_scatter_train$GarageArea, pred, col ="red",lwd=2)
# Plotting x and y scatter and model fitting line
dev.new(width = 10, height = 6)
X_scatter_train <- train[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
abline(rf_model, col = "red")
dev.new(width = 10, height = 6)
X_scatter_train <- train[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
lines(X_scatter_train$GarageArea, pred, col ="red",lwd=2)
dev.new(width = 10, height = 6)
X_scatter_train <- train[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
lines(X_scatter_train$GarageArea, pred, col ="red",lwd=2)
train_index <- createDataPartition(data$SalePrice, p = 0.8, list = FALSE)
train <- data[train_index, ]
valid <- data[-train_index, ]
################################################################
# fit random forest model
rf_model <- randomForest(SalePrice ~ . , data = train , ntree =20)
# print the model summary
print(rf_model)
pred <- predict(rf_model, train)
predictions <- predict(rf_model, valid)
test_y<- valid[['SalePrice']]
mse <- mean((predictions - test_y)^2)
print(mse)
rmse <- sqrt(mse)
print(rmse)
# Plotting x and y scatter and model fitting line
dev.new(width = 10, height = 6)
X_scatter_train <- train[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
lines(X_scatter_train$GarageArea, pred, col ="red",lwd=2)
# Plotting x and y scatter and model fitting line
dev.new(width = 10, height = 6)
X_scatter_train <- train[, c("GarageArea", "SalePrice")]
plot(X_scatter_train$GarageArea, X_scatter_train$SalePrice, xlab="GarageArea", ylab="Sale Price", main="Scatter Plot of Data")
lines(X_scatter_train$GarageArea, pred, col ="red",lwd=2)
